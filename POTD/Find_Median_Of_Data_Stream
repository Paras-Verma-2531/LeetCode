class MedianFinder {
/*
Ques:https://leetcode.com/problems/find-median-from-data-stream/
*/
    private PriorityQueue<Integer>maxheap;
    private PriorityQueue<Integer>minheap;
    public MedianFinder() {
        maxheap=new PriorityQueue<>(Collections.reverseOrder());
        minheap=new PriorityQueue<>();
    }
    
    public void addNum(int num) {
        if(maxheap.isEmpty()||maxheap.peek()>=num)maxheap.offer(num);
        else
            minheap.offer(num);
        if(maxheap.size()>minheap.size()+1)
            minheap.offer(maxheap.poll());
        else if(maxheap.size()<minheap.size())
            maxheap.offer(minheap.poll());
    }
    
    public double findMedian() {
        if(maxheap.size()==minheap.size())return((maxheap.peek()+minheap.peek())/2.0);
        return maxheap.peek();
    }
}
